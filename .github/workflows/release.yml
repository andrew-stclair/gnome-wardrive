name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Extract version from tag
      id: get_version
      run: |
        # Extract version from tag (remove 'v' prefix)
        VERSION=${GITHUB_REF_NAME#v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
    
    - name: Update version in meson.build
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        sed -i "s/\(project([^,]*,[^,]*version: '\)[^']*\('\)/\1$VERSION\2/" meson.build
        echo "Updated meson.build version to $VERSION"
        grep "version:" meson.build
    
    - name: Update debian/changelog
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        export DEBEMAIL="${{ vars.OWNER_EMAIL }}"
        export DEBFULLNAME="${{ vars.OWNER_NAME }}"
        
        # Update the version in debian/changelog
        # Using -b to allow any version (including downgrades or prereleases)
        dch -b -v "${VERSION}-1" -D unstable "Release version ${VERSION}"
        echo "Updated debian/changelog:"
        head -n 5 debian/changelog
    
    - name: Install build dependencies
      run: |
        sudo apt update
        sudo apt install -y debhelper dh-python python3-all meson ninja-build pkg-config \
          libgtk-4-dev libadwaita-1-dev python-gi-dev gir1.2-gtk-4.0 gir1.2-adw-1 \
          gir1.2-nm-1.0 gir1.2-geoclue-2.0 libnm-dev libglib2.0-dev desktop-file-utils \
          appstream-util build-essential devscripts python3-requests python3-gpxpy gettext
    
    - name: Build Debian package
      run: |
        export DEBEMAIL="${{ vars.OWNER_EMAIL }}"
        export DEBFULLNAME="${{ vars.OWNER_NAME }}"
        
        # Set up meson build first to ensure everything is configured
        meson setup builddir --buildtype=release
        
        # Build the Debian package using debuild (architecture-independent)
        debuild -us -uc -b
        
        # Verify the package was built and contains the application
        if [ -f ../gnome-wardrive_*.deb ]; then
          echo "✅ Package built successfully:"
          ls -la ../gnome-wardrive_*.deb
        else
          echo "❌ No .deb package found!"
          exit 1
        fi
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deb-all
        path: ../*.deb
        retention-days: 1
  
  release:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        files: |
          artifacts/deb-all/*.deb
        body: |
          ## GNOME Wardrive ${{ github.ref_name }}
          
          WiFi wardriving application with native Debian packaging.
          
          **Installation:**
          ```bash
          sudo dpkg -i gnome-wardrive_*.deb
          sudo apt-get install -f
          gnome-wardrive
          ```
          
          **Features:**
          - Native WiFi scanning via NetworkManager
          - GPS location tracking via GeoClue  
          - Export formats: CSV, KML, GPX
          - Mobile-optimized GTK4/Libadwaita interface
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}