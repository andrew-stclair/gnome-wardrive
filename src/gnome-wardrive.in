#!/usr/bin/env python3

import os
import sys
import signal
import locale
import gettext

VERSION = '@VERSION@'
pkgdatadir = '@pkgdatadir@'
localedir = '@localedir@'

sys.path.insert(1, pkgdatadir)
signal.signal(signal.SIGINT, signal.SIG_DFL)

locale.bindtextdomain('gnome-wardrive', localedir)
locale.textdomain('gnome-wardrive')
gettext.install('gnome-wardrive', localedir)

if __name__ == '__main__':
    import gi
    from gi.repository import Gio
    
    # Load gresource BEFORE importing the application modules
    # This is critical because the window template decorators require the gresource to be loaded
    possible_paths = [
        os.path.join(pkgdatadir, 'gnome-wardrive.gresource'),
        os.path.join(os.path.dirname(__file__), '..', 'builddir', 'data', 'gnome-wardrive.gresource'),  # Development build
        os.path.join(os.path.dirname(__file__), '..', 'data', 'gnome-wardrive.gresource'),  # Development fallback
        'gnome-wardrive.gresource'  # Current directory fallback
    ]
    
    resource_loaded = False
    for gresource_path in possible_paths:
        if os.path.exists(gresource_path):
            try:
                resource = Gio.Resource.load(gresource_path)
                resource._register()
                resource_loaded = True
                print(f"Loaded gresource from: {gresource_path}", file=sys.stderr)
                break
            except Exception as e:
                print(f"Failed to load gresource from {gresource_path}: {e}", file=sys.stderr)
                continue
    
    if not resource_loaded:
        print("ERROR: Could not load gresource file. UI will not display correctly.", file=sys.stderr)
        print(f"Searched paths: {possible_paths}", file=sys.stderr)
        print(f"pkgdatadir contents: {os.listdir(pkgdatadir) if os.path.exists(pkgdatadir) else 'Directory not found'}", file=sys.stderr)
        sys.exit(1)

    # Now import the application modules after gresource is loaded
    from gnome_wardrive.main import main
    sys.exit(main())